# Problems 1-10

## Problem 1

::: {.callout-note icon=false}
## Problem

<p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>
<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p>
:::

### Julia

```{julia}
function p1()
  [x for x ∈ 1:1000 if (x % 3 == 0 || x % 5 == 0)] |> sum
end;

p1()
```

```{julia}
using BenchmarkTools;
@benchmark p1()
```


### R

```{r}
p1 = function() {
  1+1
}

p1()
```

```{r}
bench::mark(p1(), iterations = 10)
```

### Python

```{python}
import numpy as np
import timeit

def p1(n = 1000):
    return sum([x for x in range(n) if x % 3 == 0 or x % 5 == 0])
```

```{python}
%timeit p1()
```

## Problem 2
::: {.callout-note icon=false}
## Problem

<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
:::


### Julia
```{julia}
function p2()
    # start with the first 2 terms
    fibo = [1, 2]
    
    # while smaller than 4_000_000, keep adding
    while true
        current_fibo_term = fibo[end] + fibo[end - 1]
        if current_fibo_term < 4_000_000
            push!(fibo, current_fibo_term)
        else 
            break
        end        
    end
    
    # sum the results
    return [x for x ∈ fibo if iseven(x)] |> sum
end;
p2()
```

```{julia}
using BenchmarkTools;
@benchmark p2()
```

```{python}
# def p2(roof = 4 * 10 ** 6):
#     fibo = [1,2]
#     while True:
#         fibo = fibo + [fibo[-1] + fibo[-2]]
#         if fibo[-1] > roof:
#             break
#     return sum([x for x in fibo if x % 2  == 0])

def p2(roof = 4 * 10 ** 6):
    a, b = 1, 2
    even_sum = 0
    while True:
        if b % 2 == 0:
            even_sum += b
        a, b = b, a + b
        if b > roof:
            break
    return even_sum
```

```{python}
%timeit p2()
```

## Problem 3
::: {.callout-note icon=false}
## Problem

<p>The prime factors of $13195$ are $5, 7, 13$ and $29$.</p>
<p>What is the largest prime factor of the number $600851475143$?</p>
:::

### Julia
```{julia}
# define a function that give prime numbers up to n
function sieve_of_eratosthenes(n::Integer)
    sieve = trues(n)  # Create a boolean array to mark primes

    # Set the multiples of primes as false (not prime)
    for i in 2:isqrt(n)
        if sieve[i]
            for j in i^2:i:n
                sieve[j] = false
            end
        end
    end

    primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes

    return primes
end;

function p3()
    n = 600851475143
    
    # get all primes lesses than sqrt(n)
    possible_primes = sieve_of_eratosthenes(isqrt(n))

    # get the biggest one
    id = findlast(x -> n % x == 0, possible_primes)    
    return possible_primes[id]
end;

p3()
```

```{julia}
using BenchmarkTools;
@benchmark p3()
```

### Python

```{python}
def p3(n):
    
    larger_prime_divisor = None
    for lesser in range(n, 1, -1):
        
        divides = n % lesser == 0
        if divides:
            is_prime = True
            j = 2
            while j < lesser:
                is_prime = not lesser % j == 0
                if not is_prime:
                    break
                j += 1
            
            if is_prime:
                larger_prime_divisor = lesser
                break
    
    return larger_prime_divisor
```

```{python}
# %timeit p3(600851475143)
print('not optimized just yet!')
```


## Problem 5

::: {.callout-note icon=false}
## Problem

<p>$2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder.</p>
<p>What is the smallest positive number that is <dfn class="tooltip">evenly divisible<span class="tooltiptext">divisible with no remainder</span></dfn> by all of the numbers from $1$ to $20$?</p>
:::


## Problem 8

::: {.callout-note icon=false}
## Problem

<p>The four adjacent digits in the $1000$-digit number that have the greatest product are $9 \times 9 \times 8 \times 9 = 5832$.</p>
<p class="monospace center">
73167176531330624919225119674426574742355349194934<br>
96983520312774506326239578318016984801869478851843<br>
85861560789112949495459501737958331952853208805511<br>
12540698747158523863050715693290963295227443043557<br>
66896648950445244523161731856403098711121722383113<br>
62229893423380308135336276614282806444486645238749<br>
30358907296290491560440772390713810515859307960866<br>
70172427121883998797908792274921901699720888093776<br>
65727333001053367881220235421809751254540594752243<br>
52584907711670556013604839586446706324415722155397<br>
53697817977846174064955149290862569321978468622482<br>
83972241375657056057490261407972968652414535100474<br>
82166370484403199890008895243450658541227588666881<br>
16427171479924442928230863465674813919123162824586<br>
17866458359124566529476545682848912883142607690042<br>
24219022671055626321111109370544217506941658960408<br>
07198403850962455444362981230987879927244284909188<br>
84580156166097919133875499200524063689912560717606<br>
05886116467109405077541002256983155200055935729725<br>
71636269561882670428252483600823257530420752963450<br></p>
<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>
:::

### Julia

```{julia}
function p8()
  big_string = "73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450" |>
      filter(isnumeric) # keep only numeric characters
  
  biggest_product = 0
  winner_string = ""
  amount_of_digits = 13
  
  for i in (amount_of_digits + 1):length(big_string)
      current_string = collect(big_string[i-amount_of_digits : i])
      
      p = map(x -> parse(Int32, x), current_string) |> prod
      if p > biggest_product
          biggest_product = p
          winner_string = current_string
      end
  end
  
  return reduce(*, winner_string), biggest_product
end;

p8()
```


```{julia}
using BenchmarkTools;
@benchmark p8()
```

## Problem 9

::: {.callout-note icon=false}
## Problem

<p>A Pythagorean triplet is a set of three natural numbers, $a \lt b \lt c$, for which,
$$a^2 + b^2 = c^2.$$</p>
<p>For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.</p>
<p>There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.<br>Find the product $abc$.</p>
:::

## Problem 10

::: {.callout-note icon=false}
## Problem

<p>The sum of the primes below $10$ is $2 + 3 + 5 + 7 = 17$.</p>
<p>Find the sum of all the primes below two million.</p>
:::

