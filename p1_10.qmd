# Problems 1-10

## Problem 1

```{=html}
<p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>
<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p>
```


### Julia

```{julia}
function p1()
  [x for x ∈ 1:1000 if (x % 3 == 0 || x % 5 == 0)] |> sum
end;

p1()
```

```{julia}
using BenchmarkTools;
@benchmark p1()
```


### R

```{r}
p1 = function() {
  1+1
}

p1()
```

```{r}
bench::mark(p1(), iterations = 10)
```

### Python

```{python}
1+1
```

## Problem 2

### Julia
```{julia}
function p2()
    fibo = [1, 2]
    while true
        current_fibo_term = fibo[end] + fibo[end - 1]
        if current_fibo_term < 4_000_000
            push!(fibo, current_fibo_term)
        else 
            break
        end        
    end
    
    return [x for x ∈ fibo if iseven(x)] |> sum
end;
p2()
```

```{julia}
using BenchmarkTools;
@benchmark p2()
```

## Problem 5

### Julia
```{julia}
function sieve_of_eratosthenes(n::Integer)
    sieve = trues(n)  # Create a boolean array to mark primes

    # Set the multiples of primes as false (not prime)
    for i in 2:isqrt(n)
        if sieve[i]
            for j in i^2:i:n
                sieve[j] = false
            end
        end
    end

    primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes

    return primes
end;

function p5()
    n = 600851475143
    
    possible_primes = sieve_of_eratosthenes(isqrt(n))

    id = findlast(x -> n % x == 0, possible_primes)    
    return possible_primes[id]
end;

p5()
```

```{julia}
using BenchmarkTools;
@benchmark p5()
```

