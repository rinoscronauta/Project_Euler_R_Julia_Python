{
  "hash": "030c001809ac0cc9d549206e0a135ffd",
  "result": {
    "markdown": "# Problems 1-10\n\n## Problem 1\n\n::: {.callout-note icon=false}\n## Problem\n\n<p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>\n<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p>\n:::\n\n### Julia\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nfunction p1()\n  [x for x ∈ 1:1000 if (x % 3 == 0 || x % 5 == 0)] |> sum\nend;\n\np1()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n234168\n```\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p1()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.586 μs … 204.244 μs  ┊ GC (min … max): 0.00% … 95.27%\n Time  (median):     3.733 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.270 μs ±   4.877 μs  ┊ GC (mean ± σ):  3.87% ±  3.40%\n\n  ▃▇█▇▆▄▃▂▁▁▁▁ ▁         ▁▂▃▄▄▄▄▃▃▂▂▂▃▂▂▂▂▂▁                  ▂\n  ████████████████▇▇▇▇▅▆▇███████████████████████▇████▇█▇▆▆▇▆▆ █\n  3.59 μs      Histogram: log(frequency) by time      5.82 μs <\n\n Memory estimate: 7.61 KiB, allocs estimate: 6.\n```\n:::\n:::\n\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 = function() {\n  1+1\n}\n\np1()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::mark(p1(), iterations = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p1()          190ns    220ns  2697759.    8.19KB        0\n```\n:::\n:::\n\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n## Problem 2\n::: {.callout-note icon=false}\n## Problem\n\n<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:\n$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots$$</p>\n<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>\n:::\n\n\n### Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\nfunction p2()\n    fibo = [1, 2]\n    while true\n        current_fibo_term = fibo[end] + fibo[end - 1]\n        if current_fibo_term < 4_000_000\n            push!(fibo, current_fibo_term)\n        else \n            break\n        end        \n    end\n    \n    return [x for x ∈ fibo if iseven(x)] |> sum\nend;\np2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4613732\n```\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBenchmarkTools.Trial: 10000 samples with 218 evaluations.\n Range (min … max):  337.009 ns …  10.698 μs  ┊ GC (min … max): 0.00% … 92.70%\n Time  (median):     344.780 ns               ┊ GC (median):    0.00%\n Time  (mean ± σ):   385.827 ns ± 529.089 ns  ┊ GC (mean ± σ):  9.13% ±  6.38%\n\n  ▄▇█▇▅▃▂▂▁                                                     ▂\n  ███████████▇▇▆▆▆▄▅▄▄▅▃▄▄▄▅▁▅▅▄▅▅▄▅▅▄▄▃▃▅▄▅▅▆▇▆▇▆▇▆▆▆▇▆▆▆▅▅▅▅▅ █\n  337 ns        Histogram: log(frequency) by time        517 ns <\n\n Memory estimate: 1.02 KiB, allocs estimate: 7.\n```\n:::\n:::\n\n\n## Problem 5\n\n::: {.callout-note icon=false}\n## Problem\n\n<p>$2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder.</p>\n<p>What is the smallest positive number that is <dfn class=\"tooltip\">evenly divisible<span class=\"tooltiptext\">divisible with no remainder</span></dfn> by all of the numbers from $1$ to $20$?</p>\n:::\n\n\n### Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\nfunction sieve_of_eratosthenes(n::Integer)\n    sieve = trues(n)  # Create a boolean array to mark primes\n\n    # Set the multiples of primes as false (not prime)\n    for i in 2:isqrt(n)\n        if sieve[i]\n            for j in i^2:i:n\n                sieve[j] = false\n            end\n        end\n    end\n\n    primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n\n    return primes\nend;\n\nfunction p5()\n    n = 600851475143\n    \n    possible_primes = sieve_of_eratosthenes(isqrt(n))\n\n    id = findlast(x -> n % x == 0, possible_primes)    \n    return possible_primes[id]\nend;\n\np5()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6857\n```\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing BenchmarkTools;\n@benchmark p5()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBenchmarkTools.Trial: 2010 samples with 1 evaluation.\n Range (min … max):  2.275 ms …   6.738 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     2.449 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.487 ms ± 181.545 μs  ┊ GC (mean ± σ):  0.66% ± 1.70%\n\n                  ▁█▃                                          \n  ▁▁▁▃▃▂▂▂▂▂▂▃▃▂▃▄███▆▄▅▄▄▃▃▃▄▆▆▄▄▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▂▁▁▁ ▂\n  2.27 ms         Histogram: frequency by time        2.78 ms <\n\n Memory estimate: 6.48 MiB, allocs estimate: 8.\n```\n:::\n:::\n\n\n\n## Problem 8\n\n::: {.callout-note icon=false}\n## Problem\n\n<p>The four adjacent digits in the $1000$-digit number that have the greatest product are $9 \\times 9 \\times 8 \\times 9 = 5832$.</p>\n<p class=\"monospace center\">\n73167176531330624919225119674426574742355349194934<br>\n96983520312774506326239578318016984801869478851843<br>\n85861560789112949495459501737958331952853208805511<br>\n12540698747158523863050715693290963295227443043557<br>\n66896648950445244523161731856403098711121722383113<br>\n62229893423380308135336276614282806444486645238749<br>\n30358907296290491560440772390713810515859307960866<br>\n70172427121883998797908792274921901699720888093776<br>\n65727333001053367881220235421809751254540594752243<br>\n52584907711670556013604839586446706324415722155397<br>\n53697817977846174064955149290862569321978468622482<br>\n83972241375657056057490261407972968652414535100474<br>\n82166370484403199890008895243450658541227588666881<br>\n16427171479924442928230863465674813919123162824586<br>\n17866458359124566529476545682848912883142607690042<br>\n24219022671055626321111109370544217506941658960408<br>\n07198403850962455444362981230987879927244284909188<br>\n84580156166097919133875499200524063689912560717606<br>\n05886116467109405077541002256983155200055935729725<br>\n71636269561882670428252483600823257530420752963450<br></p>\n<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>\n:::\n\n## Problem 9\n\n::: {.callout-note icon=false}\n## Problem\n\n<p>A Pythagorean triplet is a set of three natural numbers, $a \\lt b \\lt c$, for which,\n$$a^2 + b^2 = c^2.$$</p>\n<p>For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.</p>\n<p>There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.<br>Find the product $abc$.</p>\n:::\n\n## Problem 10\n\n::: {.callout-note icon=false}\n## Problem\n\n<p>The sum of the primes below $10$ is $2 + 3 + 5 + 7 = 17$.</p>\n<p>Find the sum of all the primes below two million.</p>\n:::\n\n",
    "supporting": [
      "p1_10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}