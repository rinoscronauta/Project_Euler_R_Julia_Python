[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Problems 1-10",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndici = {'Oi': [1,2], 'Tchau': ['A', 'B']}\n\ndf = pd.DataFrame(dici)\n\ndomínio = np.arange(0, 5, 0.1)\nimagem = np.exp(domínio / 2)\n\n# define figura com dois slots de plot\nfig, (ax0, ax1) = plt.subplots(2,1)\n\nax0.plot(df['Tchau'], df['Oi'])\nax1.plot(domínio, imagem)\n\nplt.show()\n\n\n\n\n\nusing BenchmarkTools;\n\n@btime 1+1\n\n  1.132 ns (0 allocations: 0 bytes)\n\n\n2"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Euler with R, Julia and Python",
    "section": "",
    "text": "Preface\nSolving the problems in https://projecteuler.net/archives using the 3 main data science languages."
  },
  {
    "objectID": "intro.html#problem-1",
    "href": "intro.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\nEnunciado\n\nJulia\n\nusing BenchmarkTools;\n\n@benchmark 1+1\n\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\n Range (min … max):  1.132 ns … 2.606 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.142 ns             ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.139 ns ± 0.016 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▂                                                  █    ▆  \n  █▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁█ ▂\n  1.13 ns        Histogram: frequency by time       1.14 ns &lt;\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\nR\n\np1 = function() {\n  1+1\n}\n\np1()\n\n[1] 2\n\n\n\nbench::mark(p1())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 p1()          110ns    130ns  7268602.    8.19KB        0\n\n\n\n\nPython\n\n1+1\n\n2"
  },
  {
    "objectID": "p1-10.html#problem-1",
    "href": "p1-10.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\n\n&lt;p&gt;If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.&lt;/p&gt;\n&lt;p&gt;Find the sum of all the multiples of $3$ or $5$ below $1000$.&lt;/p&gt;\n\n\nJulia\n\nfunction p1()\n  1+1\nend;\n\np1()\n\n2\n\n\n\nusing BenchmarkTools;\n@benchmark p1() evals = 10 \n\nBenchmarkTools.Trial: 10000 samples with 10 evaluations.\n Range (min … max):  2.000 ns … 15.000 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     2.000 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.360 ns ±  0.500 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █    ▃                                              ▇    ▂ ▁\n  █▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁█ █\n  2 ns         Histogram: log(frequency) by time      3.1 ns &lt;\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\nR\n\np1 = function() {\n  1+1\n}\n\np1()\n\n[1] 2\n\n\n\nbench::mark(p1(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 p1()          130ns    185ns  3657937.    8.19KB        0\n\n\n\n\nPython\n\n1+1\n\n2"
  },
  {
    "objectID": "p1_10.html#problem-1",
    "href": "p1_10.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\nIf we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.\nFind the sum of all the multiples of $3$ or $5$ below $1000$.\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:1000 if (x % 3 == 0 || x % 5 == 0)] |&gt; sum\nend;\n\np1()\n\n234168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.568 μs … 140.086 μs  ┊ GC (min … max): 0.00% … 94.02%\n Time  (median):     3.711 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.157 μs ±   3.584 μs  ┊ GC (mean ± σ):  2.93% ±  3.34%\n\n   ▆██▇▅▄▃▂▂▁▁                 ▂▄▄▅▅▄▄▃▃▃▂▂▂▂▂▂▁▁▁            ▂\n  ███████████████▇█▆▇▇▇▆▆▆▅▅▅▂▇█████████████████████▇▇█▇▆▇▇▅▅ █\n  3.57 μs      Histogram: log(frequency) by time      5.35 μs &lt;\n\n Memory estimate: 7.61 KiB, allocs estimate: 6.\n\n\n\n\nR\n\np1 = function() {\n  1+1\n}\n\np1()\n\n[1] 2\n\n\n\nbench::mark(p1(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 p1()          120ns    156ns  3833252.    8.19KB        0\n\n\n\n\nPython\n\n1+1\n\n2"
  },
  {
    "objectID": "p1_10.html#problem-2",
    "href": "p1_10.html#problem-2",
    "title": "1  Problems 1-10",
    "section": "Problem 2",
    "text": "Problem 2\n\nJulia\n\nfunction p2()\n    fibo = [1, 2]\n    while true\n        current_fibo_term = fibo[end] + fibo[end - 1]\n        if current_fibo_term &lt; 4_000_000\n            push!(fibo, current_fibo_term)\n        else \n            break\n        end        \n    end\n    \n    return [x for x ∈ fibo if iseven(x)] |&gt; sum\nend;\np2()\n\n4613732\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 218 evaluations.\n Range (min … max):  339.427 ns …   9.942 μs  ┊ GC (min … max): 0.00% … 94.69%\n Time  (median):     349.261 ns               ┊ GC (median):    0.00%\n Time  (mean ± σ):   394.634 ns ± 546.623 ns  ┊ GC (mean ± σ):  9.29% ±  6.43%\n\n  ▁▆█▇▆▃▂▂▂▂▁                                                   ▁\n  █████████████▇▇▇▇▇▇▆▆▅▆▆▅▆▆▅▅▅▄▅▅▅▅▅▅▅▆▇▆▆▆▆▅▄▆▅▇▇▅▆▇▅▄▅▅▅▄▄▄ █\n  339 ns        Histogram: log(frequency) by time        538 ns &lt;\n\n Memory estimate: 1.02 KiB, allocs estimate: 7."
  },
  {
    "objectID": "p1_10.html#problem-5",
    "href": "p1_10.html#problem-5",
    "title": "1  Problems 1-10",
    "section": "Problem 5",
    "text": "Problem 5\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n    sieve = trues(n)  # Create a boolean array to mark primes\n\n    # Set the multiples of primes as false (not prime)\n    for i in 2:isqrt(n)\n        if sieve[i]\n            for j in i^2:i:n\n                sieve[j] = false\n            end\n        end\n    end\n\n    primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n\n    return primes\nend;\n\nfunction p5()\n    n = BigInt(600851475143)\n    \n    possible_primes = sieve_of_eratosthenes(isqrt(n))\n\n    id = findlast(x -&gt; n % x == 0, possible_primes)    \n    return possible_primes[id]\nend;\n\np5()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\nBenchmarkTools.Trial: 8 samples with 1 evaluation.\n Range (min … max):  670.788 ms … 728.544 ms  ┊ GC (min … max): 21.88% … 23.32%\n Time  (median):     677.346 ms               ┊ GC (median):    21.62%\n Time  (mean ± σ):   687.802 ms ±  21.444 ms  ┊ GC (mean ± σ):  22.02% ±  0.84%\n\n        █                                                        \n  ▇▁▁▇▁▁█▁▁▁▁▁▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁\n  671 ms           Histogram: frequency by time          729 ms &lt;\n\n Memory estimate: 319.47 MiB, allocs estimate: 14553876."
  }
]