[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Euler with R, Julia and Python",
    "section": "",
    "text": "Preface\nSolving the problems in https://projecteuler.net/archives using the 3 main data science languages."
  },
  {
    "objectID": "p1_10.html#problem-1",
    "href": "p1_10.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\nIf we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.\nFind the sum of all the multiples of $3$ or $5$ below $1000$.\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:1000 if (x % 3 == 0 || x % 5 == 0)] |&gt; sum\nend;\n\np1()\n\n234168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\nBenchmarkTools.Trial: 10000 samples with 8 evaluations.\n Range (min … max):  3.557 μs … 199.304 μs  ┊ GC (min … max): 0.00% … 95.31%\n Time  (median):     3.974 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.362 μs ±   5.058 μs  ┊ GC (mean ± σ):  3.88% ±  3.39%\n\n   ▂█▂                                                         \n  ▁███▅▄▃▂▂▂▃▃▃▃▃▂▂▂▂▁▁▁▂▂▃▄▄▄▃▃▂▃▂▂▂▂▂▂▂▂▂▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  3.56 μs         Histogram: frequency by time        5.89 μs &lt;\n\n Memory estimate: 7.61 KiB, allocs estimate: 6.\n\n\n\n\nR\n\np1 = function() {\n  1+1\n}\n\np1()\n\n[1] 2\n\n\n\nbench::mark(p1(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 p1()          130ns    165ns  3199231.    8.19KB        0\n\n\n\n\nPython\n\n1+1\n\n2"
  },
  {
    "objectID": "p1_10.html#problem-2",
    "href": "p1_10.html#problem-2",
    "title": "1  Problems 1-10",
    "section": "Problem 2",
    "text": "Problem 2\n\nJulia\n\nfunction p2()\n    fibo = [1, 2]\n    while true\n        current_fibo_term = fibo[end] + fibo[end - 1]\n        if current_fibo_term &lt; 4_000_000\n            push!(fibo, current_fibo_term)\n        else \n            break\n        end        \n    end\n    \n    return [x for x ∈ fibo if iseven(x)] |&gt; sum\nend;\np2()\n\n4613732\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 219 evaluations.\n Range (min … max):  336.932 ns …  10.536 μs  ┊ GC (min … max): 0.00% … 94.57%\n Time  (median):     346.950 ns               ┊ GC (median):    0.00%\n Time  (mean ± σ):   389.892 ns ± 543.059 ns  ┊ GC (mean ± σ):  9.49% ±  6.51%\n\n   ▅▇██▆▄▃▃▃▂▂▁▁▁                                               ▂\n  ██████████████████▇▇▆▆▆▆▅▅▄▅▄▃▄▄▁▁▃▃▄▄▁▃▁▃▄▄▃▅▄▅▆██▇█▇▆▅▄▄▄▅▆ █\n  337 ns        Histogram: log(frequency) by time        496 ns &lt;\n\n Memory estimate: 1.02 KiB, allocs estimate: 7."
  },
  {
    "objectID": "p1_10.html#problem-5",
    "href": "p1_10.html#problem-5",
    "title": "1  Problems 1-10",
    "section": "Problem 5",
    "text": "Problem 5\n\nJulia\n\nfunction sieve_of_eratosthenes(n::Integer)\n    sieve = trues(n)  # Create a boolean array to mark primes\n\n    # Set the multiples of primes as false (not prime)\n    for i in 2:isqrt(n)\n        if sieve[i]\n            for j in i^2:i:n\n                sieve[j] = false\n            end\n        end\n    end\n\n    primes = filter(x -&gt; sieve[x], 2:n)  # Filter out non-primes\n\n    return primes\nend;\n\nfunction p5()\n    n = 600851475143\n    \n    possible_primes = sieve_of_eratosthenes(isqrt(n))\n\n    id = findlast(x -&gt; n % x == 0, possible_primes)    \n    return possible_primes[id]\nend;\n\np5()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\nBenchmarkTools.Trial: 2088 samples with 1 evaluation.\n Range (min … max):  2.172 ms …   3.324 ms  ┊ GC (min … max): 0.00% … 12.62%\n Time  (median):     2.355 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.393 ms ± 121.483 μs  ┊ GC (mean ± σ):  0.97% ±  2.38%\n\n              ██▂ ▅▂                                           \n  ▁▁▂▁▁▃▂▂▃▄▄▅██████▇▆▇▇▄▃▃▃▃▃▂▄▄▄▃▃▃▂▂▁▁▁▂▁▂▂▂▁▂▁▁▁▁▁▂▁▁▁▁▁▁ ▂\n  2.17 ms         Histogram: frequency by time        2.81 ms &lt;\n\n Memory estimate: 6.48 MiB, allocs estimate: 8."
  }
]