[
  {
    "objectID": "p1_10.html#problem-1",
    "href": "p1_10.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\n\n\n\n\n\n\nProblem\n\n\n\n\nIf we list all the natural numbers below \\(10\\) that are multiples of \\(3\\) or \\(5\\), we get \\(3, 5, 6\\) and \\(9\\). The sum of these multiples is \\(23\\).\n\n\nFind the sum of all the multiples of \\(3\\) or \\(5\\) below \\(1000\\).\n\n\n\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)] |> sum\nend;\n\np1()\n\n233168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\nBenchmarkTools.Trial: 10000 samples with 5 evaluations.\n Range (min … max):  6.205 μs … 740.991 μs  ┊ GC (min … max): 0.00% … 96.71%\n Time  (median):     8.256 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   9.865 μs ±  15.335 μs  ┊ GC (mean ± σ):  4.00% ±  2.71%\n\n  ▂▅▇█▇▅▃▄▆▆▅▅▄▄▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▂▂▃▂▁▁▁   ▁▂▂▂▂▁             ▂\n  ██████████████████████████████████████▇█▇████████▇▇▇▆▆▅▆▇▆▅ █\n  6.2 μs       Histogram: log(frequency) by time      21.4 μs <\n\n Memory estimate: 7.61 KiB, allocs estimate: 6.\n\n\n\n\nR\n\np1 = function() {\n  \n  sequencia_numeros = seq(999)\n  mult_3 = NULL\n  mult_5 = NULL\n  \n  for (i in sequencia_numeros) {\n    \n    if(i %% 3 == 0) {\n      \n      mult_3 = c(mult_3, i)\n      \n    } else if (i %% 5 == 0) {\n      \n      mult_5 = c(mult_5, i)\n      \n    }\n    \n  }\n  \n  return(sum(c(mult_3, mult_5)))\n  \n}\n\np1()\n\n[1] 233168\n\n\n\nbench::mark(p1(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p1()          628µs    654µs     1323.     269KB        0\n\n\n\n\nR\n\np1 = function(){\n  soma = 0\n  \n  for (numero in 1:999) {\n    if(numero %% 3 == 0 || numero %% 5 == 0){\n      soma = soma + numero\n    }\n  }\n  return(soma)\n}\n\np1()\n\n[1] 233168\n\n\n\nbench::mark(p1(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p1()          411µs    457µs     1968.        0B        0\n\n\n\n\nPython\n\ndef p1(n = 1000):\n  return sum([x for x in range(n) if x % 3 == 0 or x % 5 == 0]);\n\np1()\n\n233168\n\n\n\n# p1()"
  },
  {
    "objectID": "p1_10.html#problem-2",
    "href": "p1_10.html#problem-2",
    "title": "1  Problems 1-10",
    "section": "Problem 2",
    "text": "Problem 2\n\n\n\n\n\n\nProblem\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with \\(1\\) and \\(2\\), the first \\(10\\) terms will be: \\(1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots\\)\n\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\nJulia\n\nfunction p2()\n  # start with the first 2 terms\n  fibo = [1, 2]\n  \n  # while smaller than 4_000_000, keep adding\n  while true\n    current_fibo_term = fibo[end] + fibo[end - 1]\n    if current_fibo_term < 4_000_000\n      push!(fibo, current_fibo_term)\n    else \n      break\n    end        \n  end\n  \n  # sum the results\n  return [x for x ∈ fibo if iseven(x)] |> sum\nend;\np2()\n\n4613732\n\n\n\n  1+1\n\n2\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 181 evaluations.\n Range (min … max):  588.337 ns … 45.504 μs  ┊ GC (min … max): 0.00% … 96.42%\n Time  (median):     666.671 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   836.250 ns ±  1.337 μs  ┊ GC (mean ± σ):  9.29% ±  6.07%\n\n  ▅▇█▇▅▅▅▄▃▃▃▃▂▂▁▁▁▁▁▁▁▁  ▁                                    ▂\n  █████████████████████████▇██▇█▇█▇▆▇▆▇▆▆▅▆▄▇▆▅▅▅▅▆▄▅▅▄▄▅▅▄▅▄▅ █\n  588 ns        Histogram: log(frequency) by time      2.01 μs <\n\n Memory estimate: 1.02 KiB, allocs estimate: 7.\n\n\n\n\nJulia (optimized)\n\nfunction p2()\n    a, b = 1, 2\n    sum = 2\n    while true\n        current_fibo_term = a + b\n        current_fibo_term > 4_000_000 && break\n        iseven(current_fibo_term) && (sum += current_fibo_term)\n        a, b = b, current_fibo_term\n    end\n    return sum\nend;\np2()\n\n4613732\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 995 evaluations.\n Range (min … max):  21.374 ns … 86.238 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     23.919 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   24.814 ns ±  3.579 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n   ▄ ▄▁▅▂█▄▅ ▁ ▁  ▁       ▁   ▁  ▁                            ▁\n  ▇███████████▇██████████▇██▇▆█▆▅█▆▆▅▅▆▅▆▅▆▆▅▆▅▆▄▅▄▅▆▆▃▅▅▅▅▅▄ █\n  21.4 ns      Histogram: log(frequency) by time        42 ns <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\nR\n\np2 = function() {\n  ultimofibo = 2\n  soma = 2\n  \n  L = list()\n  L[[1]] = 1\n  L[[2]] = 2\n  i = 3\n  while(ultimofibo <= 4000000){\n    \n    L[[i]] = L[[i - 1]] + L[[i - 2]]\n    \n    ultimofibo = L[[i]]\n    i = i + 1\n    \n    if(ultimofibo%%2 == 0){\n      soma = soma + ultimofibo\n    }\n  }\n  \n  soma\n}\n\np2()\n\n[1] 4613732\n\n\n\nbench::mark(p2(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p2()         30.7µs   38.2µs    24412.    2.37KB        0\n\n\n\n\nR (optimized)\n\np2 = function() {\n  ultimofibo = 2\n  valor = 2\n  x0 = 1\n  x1 = 2\n  \n  while (ultimofibo < 4000000) {\n    x2 = x0 + x1\n    ultimofibo = x2\n    x0 = x1\n    x1 = x2\n    if(ultimofibo %% 2 == 0){\n      if (ultimofibo < 4000000){\n        valor = valor + ultimofibo \n      }\n    }\n  }\n  \n  valor\n}\n\np2()\n\n[1] 4613732\n\n\n\nbench::mark(p2(), iterations = 10)\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p2()         7.46µs   7.65µs   121531.        0B        0\n\n\n\n\nPython\n\ndef p2(roof = 4 * 10 ** 6):\n  fibo = [1,2]\n  while True:\n    fibo = fibo + [fibo[-1] + fibo[-2]]\n    if fibo[-1] > roof:\n      break\n    return sum([x for x in fibo if x % 2  == 0])\n  \n  # def p2(roof = 4 * 10 ** 6):\n  #     a, b = 1, 2\n  #     even_sum = 0\n  #     while True:\n  #         if b % 2 == 0:\n  #             even_sum += b\n  #         a, b = b, a + b\n  #         if b > roof:\n  #             break\n  #     return even_sum\n\n\n  # %timeit p2()"
  },
  {
    "objectID": "p1_10.html#problem-3-1",
    "href": "p1_10.html#problem-3-1",
    "title": "1  Problems 1-10",
    "section": "Problem 3",
    "text": "Problem 3\n\n\n\n\n\n\nProblem\n\n\n\n\nThe prime factors of \\(13195\\) are \\(5, 7, 13\\) and \\(29\\).\n\n\nWhat is the largest prime factor of the number \\(600851475143\\)?\n\n\n\n\nJulia\n\n# define a function that give prime numbers up to n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;\n\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = sieve_of_eratosthenes(isqrt(n))\n  \n  # get the biggest one\n  id = findlast(x -> n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p3()\n\nBenchmarkTools.Trial: 984 samples with 1 evaluation.\n Range (min … max):  3.644 ms … 22.047 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     4.626 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   5.061 ms ±  1.313 ms  ┊ GC (mean ± σ):  1.69% ± 3.89%\n\n     ▁▆█▇▆▆▅▅▄▃▃▂▃▂▁▂▁ ▁▁                                     \n  ▄▄▆████████████████████▇▇█▆▇█▆▆█▆▆▆▄▅▆▄▅▅▅▄▆▆▅▄▄▆▄▄▄▆▄▄▄▁▅ █\n  3.64 ms      Histogram: log(frequency) by time     10.2 ms <\n\n Memory estimate: 6.48 MiB, allocs estimate: 8.\n\n\n\n\nPython\n\ndef p3(n):\n  \n  larger_prime_divisor = None\n  for lesser in range(n, 1, -1):\n    \n    divides = n % lesser == 0\n    if divides:\n      is_prime = True\n      j = 2\n      while j < lesser:\n        is_prime = not lesser % j == 0\n        if not is_prime:\n          break\n        j += 1\n        \n        if is_prime:\n          larger_prime_divisor = lesser\n          break\n        \n        return larger_prime_divisor\n\n\n# %timeit p3(600851475143)\nprint('not optimized just yet!')\n\nnot optimized just yet!"
  },
  {
    "objectID": "p1_10.html#problem-4-1",
    "href": "p1_10.html#problem-4-1",
    "title": "1  Problems 1-10",
    "section": "Problem 4",
    "text": "Problem 4\n\n\n\n\n\n\nProblem\n\n\n\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two \\(2\\)-digit numbers is \\(9009 = 91 \\times 99\\).\n\n\nFind the largest palindrome made from the product of two \\(3\\)-digit numbers.\n\n\n\n\nJulia\n\nfunction is_palindrome(s::AbstractString)\n    l = length(s)\n\n    for i ∈ 1:fld(l, 2)\n        s[i] != s[l + 1 - i] && return false        \n    end\n\n    return true\nend\n\nis_palindrome (generic function with 1 method)\n\n\nis_palindrome(n::Integer) = is_palindrome(string(n))\n\nis_palindrome (generic function with 2 methods)\n\n\nfunction p4()\n    for x ∈ reverse(100:999)\n        for y ∈ reverse(100:999)\n            p = x * y\n            if is_palindrome(p) \n                return(x, y, p)\n            end\n        end\n    end\n\n    # if no palindrome was found:\n    return (0, 0, 0)\nend\n\np4 (generic function with 1 method)\n\n\np4()\n\n(995, 583, 580085)\n\n\n\nusing BenchmarkTools;\n@benchmark p4()\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  272.414 μs …   5.222 ms  ┊ GC (min … max): 0.00% … 90.82%\n Time  (median):     314.658 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   350.868 μs ± 254.840 μs  ┊ GC (mean ± σ):  6.02% ±  7.71%\n\n   ▄▄▅▇█▆▆▅▄▄▃▂▂▂▂▂▁ ▁▁                                         ▂\n  ███████████████████████▇█▇▇▇▇▇▆█▆▇▆▇▆▆▄▅▆▅▅▅▅▄▅▄▅▅▄▅▄▅▄▃▃▅▁▆▅ █\n  272 μs        Histogram: log(frequency) by time        717 μs <\n\n Memory estimate: 345.21 KiB, allocs estimate: 8034."
  },
  {
    "objectID": "p1_10.html#problem-5-1",
    "href": "p1_10.html#problem-5-1",
    "title": "1  Problems 1-10",
    "section": "Problem 5",
    "text": "Problem 5\n\n\n\n\n\n\nProblem\n\n\n\n\n\\(2520\\) is the smallest number that can be divided by each of the numbers from \\(1\\) to \\(10\\) without any remainder.\n\n\nWhat is the smallest positive number that is evenly divisibledivisible with no remainder by all of the numbers from \\(1\\) to \\(20\\)?"
  },
  {
    "objectID": "p1_10.html#problem-8",
    "href": "p1_10.html#problem-8",
    "title": "1  Problems 1-10",
    "section": "Problem 8",
    "text": "Problem 8\n\n\n\n\n\n\nProblem\n\n\n\n\nThe four adjacent digits in the \\(1000\\)-digit number that have the greatest product are \\(9 \\times 9 \\times 8 \\times 9 = 5832\\).\n\n\n73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450\n\n\nFind the thirteen adjacent digits in the \\(1000\\)-digit number that have the greatest product. What is the value of this product?\n\n\n\n\nJulia\n\nfunction p8()\n  big_string = \"73167176531330624919225119674426574742355349194934\n      96983520312774506326239578318016984801869478851843\n      85861560789112949495459501737958331952853208805511\n      12540698747158523863050715693290963295227443043557\n      66896648950445244523161731856403098711121722383113\n      62229893423380308135336276614282806444486645238749\n      30358907296290491560440772390713810515859307960866\n      70172427121883998797908792274921901699720888093776\n      65727333001053367881220235421809751254540594752243\n      52584907711670556013604839586446706324415722155397\n      53697817977846174064955149290862569321978468622482\n      83972241375657056057490261407972968652414535100474\n      82166370484403199890008895243450658541227588666881\n      16427171479924442928230863465674813919123162824586\n      17866458359124566529476545682848912883142607690042\n      24219022671055626321111109370544217506941658960408\n      07198403850962455444362981230987879927244284909188\n      84580156166097919133875499200524063689912560717606\n      05886116467109405077541002256983155200055935729725\n      71636269561882670428252483600823257530420752963450\" |> filter(isnumeric) # keep only numeric characters\n  \n  biggest_product = 0\n  winner_string = \"\"\n  amount_of_digits = 13\n  \n  for i in (amount_of_digits + 1):length(big_string)\n    current_string = collect(big_string[i-amount_of_digits : i])\n    \n    p = map(x -> parse(Int32, x), current_string) |> prod\n    if p > biggest_product\n      biggest_product = p\n      winner_string = current_string\n    end\n  end\n  \n  return reduce(*, winner_string), biggest_product\nend;\n\np8()\n\n(\"97536978179778\", 70573265280)\n\n\n\nusing BenchmarkTools;\n@benchmark p8()\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  350.165 μs …   6.484 ms  ┊ GC (min … max): 0.00% … 88.50%\n Time  (median):     404.020 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   452.086 μs ± 213.066 μs  ┊ GC (mean ± σ):  2.72% ±  5.97%\n\n   ▁▄█▇▇▆▅▅▄▃▃▂▂▂▂▂▁ ▁▁▁▁ ▁▁                                    ▂\n  ▆████████████████████████████▇██████▇▇▇▆▇▇▅▆▆▆▇▆▆▅▆▆▄▅▆▅▆▅▆▄▄ █\n  350 μs        Histogram: log(frequency) by time        958 μs <\n\n Memory estimate: 249.06 KiB, allocs estimate: 3000."
  },
  {
    "objectID": "p1_10.html#problem-9",
    "href": "p1_10.html#problem-9",
    "title": "1  Problems 1-10",
    "section": "Problem 9",
    "text": "Problem 9\n\n\n\n\n\n\nProblem\n\n\n\n\nA Pythagorean triplet is a set of three natural numbers, \\(a \\lt b \\lt c\\), for which, \\[a^2 + b^2 = c^2.\\]\n\n\nFor example, \\(3^2 + 4^2 = 9 + 16 = 25 = 5^2\\).\n\n\nThere exists exactly one Pythagorean triplet for which \\(a + b + c = 1000\\).Find the product \\(abc\\)."
  },
  {
    "objectID": "p1_10.html#problem-10-1",
    "href": "p1_10.html#problem-10-1",
    "title": "1  Problems 1-10",
    "section": "Problem 10",
    "text": "Problem 10\n\n\n\n\n\n\nProblem\n\n\n\n\nThe sum of the primes below \\(10\\) is \\(2 + 3 + 5 + 7 = 17\\).\n\n\nFind the sum of all the primes below two million."
  }
]